#ifndef ONE_WIRE_H_
#define ONE_WIRE_H_

#include "main.h"
//----------------------------------------
#define PORT_ONEWIRE     G // Порт для шины 1-wire
#define PIN_ONEWIRE      3 // Пин порта для шины 1-wire
//----------------------------------------
#define ONEWIRE_0      DDR(PORT_ONEWIRE) |= _BV(PIN_ONEWIRE) // Установить 0 на шине 1-wire. Устанавливаем на выход (притянули шину к земле).
#define ONEWIRE_1      DDR(PORT_ONEWIRE) &= ~_BV(PIN_ONEWIRE) // Установить 1 на шине 1-wire. Устанавливаем на вход (отпускаем шину).
#define ONEWIRE_LEVEL  BitRead(PIN(PORT_ONEWIRE), PIN_ONEWIRE) // Определяет значение уровня на шине 1-wire (0 или 1)

/**  Инициализация шины 1-wire
 * Выдаёт импульс сброса (reset), ожидает ответный импульс присутствия.
 * Если импульс присутствия получен, дожидается его завершения и возвращает 1, иначе возвращает 0
*/
uint8_t ONE_wire_Init(void); // Инициализация шины 1-wire. Возвращает 1 если присутствует устройство на шине, иначе 0.

/**  Отправляет один бит по шине 1-wire
 * bit - отправляемое значение, 0 - ноль, отличное от нуля значение - единица.
*/
void ONE_wire_SendBit(uint8_t bit); // Отправить 1 бит данных по шине 1-wire

/**  Отправляет один байт (восемь бит подряд), младший бит вперёд
 * c - отправляемое значение
*/
void ONE_wire_SendByte(uint8_t c); // Отправить байт данных по шине 1-wire

/**  Читает значение бита, передаваемое уйстройством по шине 1-wire
 * Возвращает 0 - если передан 0, отличное от нуля значение - если передана единица.
*/
uint8_t ONE_wire_ReadBit(void); // Чтение бита данных по шине 1-wire

/**  Читает значение байта, передаваемое уйстройством по шине 1-wire
 * Младший бит вперёд, возвращает прочитанное значение
*/
uint8_t ONE_wire_ReadByte(void); // Чтение байта данных по шине 1-wire

#endif /* ONE_WIRE_H_ */