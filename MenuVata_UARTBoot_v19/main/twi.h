#ifndef TWI_H_
#define TWI_H_

#include "main.h"

// Частота работы интерфейса I2C, Гц
#define F_SCL 100000UL // 100кГ т.к. это максимальная частота для DS1307

#define TWI_READ_BIT     0 // позиция R/W бита в адресном пакете

//####################################################
//----------АВТОНАСТРОЙКА СКОРОСТИ СВЯЗИ--------------
#define TWPS_VALUE  1 // Определяем предделитель 1
#define TWPS	    ((0<<TWPS1)|(0<<TWPS0))  // Определяем предделитель 1
#define TWBR_VALUE  ((F_CPU/F_SCL - 16)/(2*TWPS_VALUE)+1) // Настраиваем генератор скорости связи
										    // +1 чтобы скорость работы не была выше установленной F_SCL
#if TWBR_VALUE>255 // Если значение TWBRS превысило максимально допустимое
	#undef TWPS_VALUE // Снимаем определение
	#undef TWPS       // Снимаем определение
	#define TWPS_VALUE  4 // Определяем предделитель 4
	#define TWPS	    ((0<<TWPS1)|(1<<TWPS0)) // Определяем предделитель 4
#endif
#if TWBR_VALUE>255 // Если значение TWBRS превысило максимально допустимое
	#undef TWPS_VALUE // Снимаем определение
	#undef TWPS       // Снимаем определение
	#define TWPS_VALUE  16 // Определяем предделитель 16
	#define TWPS	    ((1<<TWPS1)|(0<<TWPS0)) // Определяем предделитель 16
#endif
#if TWBR_VALUE>255 // Если значение TWBRS превысило максимально допустимое
	#undef TWPS_VALUE // Снимаем определение
	#undef TWPS       // Снимаем определение
	#define TWPS_VALUE  64 // Определяем предделитель 64
	#define TWPS	    ((1<<TWPS1)|(1<<TWPS0)) // Определяем предделитель 64
#endif
#if TWBR_VALUE>255 // Если значение TWBRS превысило максимально допустимое
	#undef TWBR_VALUE // Снимаем определение
	#define TWBR_VALUE 255 // Настраиваем генератор скорости связи на более низкую частоту
	#  warning "The I2C frequency (F_SCL) is too low"
#endif
/*
Если TWI работает в ведущем режиме, то значение TWBR должно быть не менее 10.
Если значение TWBR меньше 10, то ведущее устройство шины может генерировать
некорректные сигналы на линиях SDA и SCL во время передачи байта.
*/
// Уменьшаем скорость связи до минимально допустимой
#if TWBR_VALUE<10 // Если значение TWBRS превысило максимально допустимое
	#undef TWBR_VALUE // Снимаем определение
	#define TWBR_VALUE 10 // Настраиваем генератор скорости связи на более низкую частоту
	#  warning "TWBRSET=10. The I2C frequency (F_SCL) is too high"
#endif
//####################################################

/****************************************************************************
  Статусные коды TWI модуля 
****************************************************************************/
// Общие статусные коды                    
#define TWI_START                  0x08  // Состояние СТАРТ сформировано 
#define TWI_REP_START              0x10  // Состояние ПОВТОРНЫЙ СТАРТ сформировано (повтор условия начала передачи)
#define TWI_ARB_LOST               0x38  // Был потерян приоритет 

// Master Transmitter (Ведущий в роли передающего)               
#define TWI_MT_SLA_ACK             0x18  // Ведущий отправил адрес и бит записи. Ведомый подтвердил свой адрес
#define TWI_MT_SLA_NACK            0x20  // Ведущий отправил адрес и бит записи. Нет подтверждения приема (ведомый с таким адресом не найден)
#define TWI_MT_DATA_ACK            0x28  // Ведущий передал данные и ведомый подтвердил прием
#define TWI_MT_DATA_NACK           0x30  // Ведущий передал данные. Нет подтверждения приема

// Master Receiver (Ведущий в роли принимающего)
#define TWI_MR_SLA_ACK             0x40  // Ведущий отправил адрес и бит чтения. Ведомый подтвердил свой адрес
#define TWI_MR_SLA_NACK            0x48  // Ведущий отправил адрес и бит чтения. Нет подтверждения приема (ведомый с таким адресом не найден)
#define TWI_MR_DATA_ACK            0x50  // Ведущий принял данные и передал подтверждение 
#define TWI_MR_DATA_NACK           0x58  // Ведущий принял данные и НЕ передал подтверждение

// Ошибки интерфейса
#define TWI_NO_STATE               0xF8  // Информация о состоянии отсутствует (TWINT = “0”)
#define TWI_BUS_ERROR              0x00  // Ошибка на шине из-за некоректных состояний СТАРТ или СТОП

// Пользовательские коды
#define TWI_SUCCESS                0xff // Сообщение успешно принято
//****************************************************************************

uint8_t TWI_GetState(void); // Взять статус TWI модуля
void TWI_SendData(uint8_t *msg, uint8_t msgSize); // Передать сообщение msg размером msgSize байт по шине I2C
uint8_t TWI_GetData(uint8_t *msg, uint8_t msgSize); // Получить сообщение msg размером msgSize байт по шине I2C

#endif /* TWI_H_ */